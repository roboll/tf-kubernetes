#cloud-config
coreos:
  update:
    reboot-strategy: etcd-lock

  locksmith:
    endpoint: https://$private_ipv4:2379
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_certfile: /etc/ssl/etcd/cert.pem
    etcd_keyfile: /etc/ssl/etcd/privkey.pem
    group: controller

  etcd2:
    name: ${instance_name}
    data_dir: /var/lib/etcd/data

    initial_cluster: ${etcd_peers}
    initial_cluster_state: new

    initial_advertise_peer_urls: https://$private_ipv4:2380
    listen_peer_urls: https://0.0.0.0:2380
    advertise_client_urls: https://$private_ipv4:2379
    listen_client_urls: https://0.0.0.0:2379

    peer_cert_file: /etc/ssl/etcd/cert.pem
    peer_key_file: /etc/ssl/etcd/privkey.pem
    peer_trusted_ca_file: /etc/ssl/etcd/ca.pem
    peer_client_cert_auth: true

    cert_file: /etc/ssl/etcd/cert.pem
    key_file: /etc/ssl/etcd/privkey.pem
    trusted_ca_file: /etc/ssl/etcd/ca.pem
    client_cert_auth: true

  flannel:
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_keyfile: /etc/ssl/etcd/privkey.pem
    etcd_certfile: /etc/ssl/etcd/cert.pem
    etcd_endpoints: https://$private_ipv4:2379

  units:
    - name: install-ssh-helper.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/install-ssh-helper.sh

    - name: vault-login.service
      command: start
      content: |
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/vault-login.sh

    - name: vault-renew-token.service
      content: |
        [Service]
        Type=simple
        ExecStart=/opt/bin/vault-renew-token.sh

    - name: vault-renew-token.timer
      command: start
      content: |
        [Timer]
        OnActiveSec=12h
        OnUnitActiveSec=12h

    - name: kubelet-certs.service
      command: start
      content: |
        [Unit]
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/kubelet-certs.sh
        ExecStartPost=/bin/bash -c "systemctl kill -s HUP kubelet.service || true"

    - name: kubelet-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: etcd-certs.service
      command: start
      content: |
        [Unit]
        Before=etcd2.service
        Before=flanneld.service
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/etcd-certs.sh
        ExecStartPost=/bin/bash -c "systemctl kill -s HUP etcd2.service || true"
        ExecStartPost=/bin/bash -c "systemctl kill -s HUP flanneld.service || true"

    - name: etcd-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: dev-xvdb-format.service
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb.device
        After=dev-xvdb.device

        Before=var-lib-etcd.mount
        ConditionPathExists=!/var/lib/etcd.formatted

        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/bin/bash -c "mkfs.ext4 -E root_owner=$(id -u etcd):$(id -u etcd) /dev/xvdb"
        ExecStartPost=/bin/touch /var/lib/etcd.formatted

    - name: var-lib-etcd.mount
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb-format.service
        After=dev-xvbd-format.service

        Before=etcd2.service

        [Mount]
        What=/dev/xvdb
        Where=/var/lib/etcd
        Type=ext4

    - name: etcd2.service
      command: start
      drop-ins:
        - name: 99-options.conf
          content: |
            [Unit]
            Before=flanneld.service
            Requires=var-lib-etcd.mount
            After=var-lib-etcd.mount etcd-certs.service

            [Service]
            Restart=always
            RestartSec=10

            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/ca.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/cert.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/privkey.pem

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 40-ssl-config.conf
          content: |
            [Unit]
            After=etcd-certs.service

        - name: 50-network-config.conf
          content: |
            [Unit]
            Before=docker.service
            Requires=etcd2.service
            After=etcd2.service

            [Service]
            ExecStartPre=/usr/bin/etcdctl \
              --endpoints https://$private_ipv4:2379 \
              --ca-file /etc/ssl/etcd/ca.pem \
              --cert-file /etc/ssl/etcd/cert.pem \
              --key-file /etc/ssl/etcd/privkey.pem \
              set /coreos.com/network/config \
                '{ "Network": "10.10.0.0/16", "Backend": { "Type": "vxlan" } }'

    - name: docker.service
      command: start
      drop-ins:
        - name: 99-mount-flags.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service

            [Service]
            MountFlags=shared

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service etcd2.service flanneld.service kubelet-certs.service
        After=docker.service etcd2.service flanneld.service kubelet-certs.service

        [Service]
        Restart=always
        RestartSec=10
        TimeoutStartSec=300

        Environment=KUBELET_ACI=${hyperkube}
        Environment=KUBELET_VERSION=${kube_version}
        Environment="RKT_OPTS=--volume dns,kind=host,source=/etc/resolv.conf \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume rkt,kind=host,source=/opt/bin/host-rkt \
        --mount volume=rkt,target=/usr/bin/rkt \
        --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
        --mount volume=var-lib-rkt,target=/var/lib/rkt \
        --volume stage,kind=host,source=/tmp \
        --mount volume=stage,target=/tmp \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log \
        --volume kubelet-ssl,kind=host,source=/etc/ssl/kubelet \
        --mount volume=kubelet-ssl,target=/etc/ssl/kubelet \
        --volume kube-ca,kind=host,source=/etc/ssl/kube/ca.pem \
        --mount volume=kube-ca,target=/etc/ssl/kube/ca.pem"

        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/opt/bin/kube-service-account.sh
        ExecStartPost=-/opt/bin/init-kube-system.sh
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${kube_fqdn} \
          --node-labels=role=controller \
          --tls-cert-file=/etc/ssl/kubelet/cert.pem \
          --tls-private-key-file=/etc/ssl/kubelet/privkey.pem \
          --config=/etc/kubernetes/manifests \
          --kubeconfig=/etc/kubernetes/kubelet/kubeconfig.yaml \
          --cloud-provider=aws \
          --cluster-dns=10.0.0.10 \
          --cluster-domain=cluster.local \
          --register-schedulable=false \
          --allow-privileged --v=2 --logtostderr=true

    - name: kube-certs.service
      command: start
      content: |
        [Unit]
        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/kube-certs.sh

    - name: kube-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: controller-certs.service
      command: start
      content: |
        [Unit]
        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/controller-certs.sh

    - name: controller-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

write_files:
  - path: /etc/ssl/vault/ca.pem
    permissions: 0600
    encoding: base64
    content: |
      ${vault_ca_cert_pem}

  - path: /opt/bin/install-ssh-helper.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      log="/var/log/vault-ssh.log"
      replace="auth\t\tsufficient\tpam_exec.so quiet expose_authtok log=$log /opt/bin/ssh-helper"
      cp /usr/lib64/pam.d/{sshd,system-remote-login,system-login,system-auth} /etc/pam.d/
      sed -r -i /etc/pam.d/system-auth -e "s,^(auth.*required.*pam_deny.so)$,$replace\\n\1,g"

  - path: /opt/bin/ssh-helper
    permissions: 0700
    content: |
      #! /bin/bash
      CMD="docker run -i --rm --net=host -e PAM_USER=$PAM_USER ${ssh_helper}"
      eval $CMD $*

  - path: /opt/bin/vault-login.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      nonce="$(cat /etc/machine-id | base64)"
      pkcs="$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')"

      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "Content-Type: application/json" \
        -d "{\"pkcs7\":\"$pkcs\",\"role\":\"${vault_instance_role}\",\"nonce\":\"$nonce\"}" \
        ${vault_address}/v1/auth/aws-ec2/login | \
        sed -re 's/.*"client_token":"([^"]*)".*/\1/g' > /root/.vault-token

  - path: /opt/bin/vault-renew-token.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      token="$(cat /root/.vault-token)"
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        ${vault_address}/v1/auth/token/renew-self > /dev/null

  - path: /opt/bin/init-kube-system.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      [ -f /etc/kubernetes/init-complete ] && {
        echo "init already complete, exiting"
        exit
      }

      until curl -sSf \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          https://$private_ipv4/healthz; do
        echo "waiting for bootstrap apiserver"; sleep 5;
      done
      echo "bootstrap apiserver ready"

      [ ! -f /etc/kubernetes/system/kube-apiserver.json.created ] && {
        echo "creating from /etc/kubernetes/system/kube-apiserver.json"
        curl -sSf -H "Content-Type: application/json" -XPOST \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          -d @/etc/kubernetes/system/kube-apiserver.json \
          https://$private_ipv4/apis/extensions/v1beta1/namespaces/kube-system/daemonsets
        touch /etc/kubernetes/system/kube-apiserver.json.created
      }

      [ ! -f /etc/kubernetes/system/kube-controller-manager.json.created ] && {
        echo "creating from /etc/kubernetes/system/kube-controller-manager.json"
        curl -sSf -H "Content-Type: application/json" -XPOST \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          -d @/etc/kubernetes/system/kube-controller-manager.json \
          https://$private_ipv4/apis/extensions/v1beta1/namespaces/kube-system/daemonsets
        touch /etc/kubernetes/system/kube-controller-manager.json.created
      }

      [ ! -f /etc/kubernetes/system/kube-flannel-server.json.created ] && {
        echo "creating from /etc/kubernetes/system/kube-flannel-server.json"
        curl -sSf -H "Content-Type: application/json" -XPOST \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          -d @/etc/kubernetes/system/kube-flannel-server.json \
          https://$private_ipv4/apis/extensions/v1beta1/namespaces/kube-system/daemonsets
        touch /etc/kubernetes/system/kube-flannel-server.json.created
      }

      [ ! -f /etc/kubernetes/system/role.json.created ] && {
        echo "creating from /etc/kubernetes/system/role.json"
        curl -sSf -H "Content-Type: application/json" -XPOST \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          -d @/etc/kubernetes/system/role.json \
          https://$private_ipv4/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles
        touch /etc/kubernetes/system/role.json.created
      }

      [ ! -f /etc/kubernetes/system/role-binding.json.created ] && {
        echo "creating from /etc/kubernetes/system/role-binding.json"
        curl -sSf -H "Content-Type: application/json" -XPOST \
          --cacert /etc/ssl/controller/ca.pem \
          --cert /etc/ssl/controller/cert.pem --key /etc/ssl/controller/privkey.pem \
          -d @/etc/kubernetes/system/role-binding.json \
          https://$private_ipv4/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings
        touch /etc/kubernetes/system/role-binding.json.created
      }

      echo "all manifests created, destroying bootstrap components"
      rm /etc/kubernetes/manifests/bootstrap-apiserver.yaml /etc/kubernetes/manifests/bootstrap-controller-manager.yaml
      touch /etc/kubernetes/init-completed

  - path: /opt/bin/kube-service-account.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /etc/kubernetes/service-account

      token="$(cat /root/.vault-token)"
      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -H "X-Vault-Token: $token" \
        ${vault_address}/v1/${service_account_path})

      sed -re 's/.*"public_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/kubernetes/service-account/pubkey.pem <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/kubernetes/service-account/privkey.pem <<< $json

  - path: /opt/bin/kube-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /etc/ssl/kube
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /etc/ssl/kube/ca.pem -z /etc/ssl/kube/ca.pem \
        ${vault_address}/v1/${kube_pki_mount}/ca/pem

      token="$(cat /root/.vault-token)"
      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d '{"common_name":"${kube_fqdn}","alt_names":"kubernetes,kubernetes.default.svc,kubernetes.default.svc.cluster.local","ip_sans":"10.0.0.1,$private_ipv4"}' \
        ${vault_address}/v1/${kube_pki_mount}/issue/${kube_pki_role})

      sed -re 's/.*"certificate":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/kube/cert.pem <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/kube/privkey.pem <<< $json

  - path: /opt/bin/controller-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /etc/ssl/controller
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /etc/ssl/controller/ca.pem -z /etc/ssl/controller/ca.pem \
        ${vault_address}/v1/${kube_pki_mount}/ca/pem

      token="$(cat /root/.vault-token)"
      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d '{"common_name": "controller"}' \
        ${vault_address}/v1/${kube_pki_mount}/issue/${controller_pki_role})

      sed -re 's/.*"certificate":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/controller/cert.pem <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/controller/privkey.pem <<< $json

  - path: /opt/bin/kubelet-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /etc/ssl/kube
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /etc/ssl/kube/ca.pem -z /etc/ssl/kube/ca.pem \
        ${vault_address}/v1/${kube_pki_mount}/ca/pem

      mkdir -p /etc/ssl/kubelet
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /etc/ssl/kubelet/ca.pem -z /etc/ssl/kubelet/ca.pem \
        ${vault_address}/v1/${kubelet_pki_mount}/ca/pem

      token="$(cat /root/.vault-token)"
      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d "{\"common_name\":\"kubelet\",\"alt_names\":\"$(hostname)\",\"ip_sans\":\"$private_ipv4\"}" \
        ${vault_address}/v1/${kubelet_pki_mount}/issue/${kubelet_pki_role})

      sed -re 's/.*"certificate":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/kubelet/cert.pem <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/kubelet/privkey.pem <<< $json

  - path: /opt/bin/etcd-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /etc/ssl/etcd
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /etc/ssl/etcd/ca.pem -z /etc/ssl/etcd/ca.pem \
        ${vault_address}/v1/${etcd_pki_mount}/ca/pem

      token="$(cat /root/.vault-token)"
      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d '{"common_name":"controller","alt_names":"localhost","ip_sans":"$private_ipv4"}' \
        ${vault_address}/v1/${etcd_pki_mount}/issue/${etcd_pki_role})

      sed -re 's/.*"certificate":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/etcd/cert.pem <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /etc/ssl/etcd/privkey.pem <<< $json

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/kubernetes/kubelet/kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      current-context: kubelet
      clusters:
        - name: kubernetes
          cluster:
            certificate-authority: /etc/ssl/kube/ca.pem
            server: https://${kube_fqdn}
      contexts:
        - name: kubelet
          context:
            cluster: kubernetes
            user: kubelet
      users:
        - name: kubelet
          user:
            client-certificate: /etc/ssl/kubelet/cert.pem
            client-key: /etc/ssl/kubelet/privkey.pem

  - path: /etc/kubernetes/controller/kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      current-context: controller
      clusters:
        - name: kubernetes
          cluster:
            certificate-authority: /etc/ssl/kube/ca.pem
            server: https://${kube_fqdn}
      contexts:
        - name: controller
          context:
            cluster: kubernetes
            user: controller
      users:
        - name: controller
          user:
            client-certificate: /etc/ssl/controller/cert.pem
            client-key: /etc/ssl/controller/privkey.pem

  - path: /etc/kubernetes/manifests/bootstrap-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: bootstrap-apiserver
        namespace: kube-system
        labels:
          app: kubernetes-bootstrap
          component: apiserver
      spec:
        hostNetwork: true
        containers:
          - name: kube-apiserver
            image: ${hyperkube}:${kube_version}
            command:
              - /hyperkube
              - apiserver
              - --secure-port=443
              - --etcd-servers=https://localhost:2379
              - --etcd-cafile=/etc/ssl/etcd/ca.pem
              - --etcd-certfile=/etc/ssl/etcd/cert.pem
              - --etcd-keyfile=/etc/ssl/etcd/privkey.pem
              - --tls-cert-file=/etc/ssl/kube/cert.pem
              - --tls-private-key-file=/etc/ssl/kube/privkey.pem
              - --service-account-key-file=/etc/kubernetes/service-account/pubkey.pem
              - --kubelet-certificate-authority=/etc/ssl/kubelet/ca.pem
              - --kubelet-client-certificate=/etc/ssl/kubelet/cert.pem
              - --kubelet-client-key=/etc/ssl/kubelet/privkey.pem
              - --client-ca-file=/etc/ssl/kube/ca.pem
              - --allow-privileged=true
              - --cloud-provider=aws
              - --service-cluster-ip-range=10.0.0.0/16
              - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true,rbac.authorization.k8s.io/v1alpha1=true
              - --advertise-address=$private_ipv4
              - --authorization-mode=RBAC
              - --authorization-rbac-super-user=controller
              - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,DenyEscalatingExec,ServiceAccount
            volumeMounts:
              - mountPath: /etc/kubernetes/service-account/pubkey.pem
                name: service-account
                readOnly: true
              - mountPath: /etc/ssl/kube/
                name: kube-certs
                readOnly: true
              - mountPath: /etc/ssl/kubelet/
                name: kubelet-certs
                readOnly: true
              - mountPath: /etc/ssl/etcd/
                name: etcd-certs
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
        volumes:
          - hostPath:
              path: /etc/kubernetes/service-account/pubkey.pem
            name: service-account
          - hostPath:
              path: /etc/ssl/kube/
            name: kube-certs
          - hostPath:
              path: /etc/ssl/kubelet/
            name: kubelet-certs
          - hostPath:
              path: /etc/ssl/etcd/
            name: etcd-certs
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host

  - path: /etc/kubernetes/manifests/bootstrap-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: bootstrap-controller-manager
        namespace: kube-system
        labels:
          app: kubernetes-bootstrap
          component: controller-manager
      spec:
        hostNetwork: true
        containers:
          - name: kube-controller-manager
            image: ${hyperkube}:${kube_version}
            command:
              - /hyperkube
              - controller-manager
              - --master=http://localhost:8088
              - --leader-elect=true
              - --service-account-private-key-file=/etc/kubernetes/service-account/privkey.pem
              - --cloud-provider=aws
            volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
              - mountPath: /etc/kubernetes/service-account/privkey.pem
                name: service-account
                readOnly: true
        volumes:
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host
          - hostPath:
              path: /etc/kubernetes/service-account/privkey.pem
            name: service-account

  - path: /etc/kubernetes/system/role.json
    permissions: 0644
    content: |
      {
        "kind": "ClusterRole",
        "apiVersion": "rbac.authorization.k8s.io/v1alpha1",
        "metadata": {
          "name": "admin-access"
        },
        "rules": [
          {
            "apiGroups": ["*"],
            "resources": ["*"],
            "verbs": ["*"],
            "nonResourceURLs": ["*"]
          }
        ]
      }

  - path: /etc/kubernetes/system/role-binding.json
    permissions: 0644
    content: |
      {
        "kind": "ClusterRoleBinding",
        "apiVersion": "rbac.authorization.k8s.io/v1alpha1",
        "metadata": {
          "name": "admin-access"
        },
        "subjects": [
          {
            "kind": "ServiceAccount",
            "name": "default",
            "namespace": "kube-system"
          },
          {
            "kind": "User",
            "name": "controller"
          },
          {
            "kind": "User",
            "name": "kubelet"
          },
          {
            "kind": "User",
            "name": "admin"
          }
        ],
        "roleRef": {
          "kind": "ClusterRole",
          "apiVersion": "rbac.authorization.k8s.io/v1alpha1",
          "name": "admin-access"
        }
      }

  - path: /etc/kubernetes/system/kube-apiserver.json
    content: |
      {
        "kind": "DaemonSet",
        "apiVersion": "extensions/v1beta1",
        "metadata": {
          "name": "kube-apiserver",
          "namespace": "kube-system",
          "labels": {
            "app": "kubernetes",
            "component": "apiserver"
          }
        },
        "spec": {
          "template": {
            "metadata": {
              "labels": {
                "app": "kubernetes",
                "component": "apiserver"
              }
            },
            "spec": {
              "nodeSelector": {
                "role": "controller"
              },
              "hostNetwork": true,
              "containers": [
                {
                  "name": "kube-apiserver",
                  "image": "${hyperkube}:${kube_version}",
                  "command": [
                    "/hyperkube", "apiserver",
                    "--secure-port=443",
                    "--etcd-servers=https://localhost:2379",
                    "--etcd-cafile=/etc/ssl/etcd/ca.pem",
                    "--etcd-certfile=/etc/ssl/etcd/cert.pem",
                    "--etcd-keyfile=/etc/ssl/etcd/privkey.pem",
                    "--tls-cert-file=/etc/ssl/kube/cert.pem",
                    "--tls-private-key-file=/etc/ssl/kube/privkey.pem",
                    "--service-account-key-file=/etc/kubernetes/service-account/pubkey.pem",
                    "--kubelet-certificate-authority=/etc/ssl/kubelet/ca.pem",
                    "--kubelet-client-certificate=/etc/ssl/kubelet/cert.pem",
                    "--kubelet-client-key=/etc/ssl/kubelet/privkey.pem",
                    "--client-ca-file=/etc/ssl/kube/ca.pem",
                    "--allow-privileged=true",
                    "--cloud-provider=aws",
                    "--service-cluster-ip-range=10.0.0.0/16",
                    "--enable-swagger-ui=true",
                    "--runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true,rbac.authorization.k8s.io/v1alpha1=true",
                    "--advertise-address=$private_ipv4",
                    "--external-hostname=${kube_fqdn}",
                    "--authorization-mode=RBAC",
                    "--authorization-rbac-super-user=controller",
                    "--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,DenyEscalatingExec,ServiceAccount"
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "host":"127.0.0.1",
                      "path": "/healthz",
                      "port": 8080
                    },
                    "initialDelaySeconds": 30,
                    "timeoutSeconds": 1
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/etc/kubernetes/service-account/pubkey.pem",
                      "name": "service-account",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/kube",
                      "name": "kube-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/etcd",
                      "name": "etcd-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/kubelet",
                      "name": "kubelet-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/controller",
                      "name": "controller-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/certs",
                      "name": "ssl-certs-host",
                      "readOnly": true
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name":"service-account",
                  "hostPath": {
                    "path": "/etc/kubernetes/service-account/pubkey.pem"
                  }
                },
                {
                  "name":"kube-certs",
                  "hostPath": {
                    "path": "/etc/ssl/kube"
                  }
                },
                {
                  "name":"kubelet-certs",
                  "hostPath": {
                    "path": "/etc/ssl/kubelet"
                  }
                },
                {
                  "name":"etcd-certs",
                  "hostPath": {
                    "path": "/etc/ssl/etcd"
                  }
                },
                {
                  "name":"controller-certs",
                  "hostPath": {
                    "path": "/etc/ssl/controller"
                  }
                },
                {
                  "name":"ssl-certs-host",
                  "hostPath": {
                    "path": "/usr/share/ca-certificates"
                  }
                }
              ]
            }
          }
        }
      }

  - path: /etc/kubernetes/system/kube-controller-manager.json
    content: |
      {
        "kind": "DaemonSet",
        "apiVersion": "extensions/v1beta1",
        "metadata": {
          "name": "kube-controller-manager",
          "namespace": "kube-system",
          "labels": {
            "app": "kubernetes",
            "component": "controller-manager"
          }
        },
        "spec": {
          "template": {
            "metadata": {
              "labels": {
                "app": "kubernetes",
                "component": "controller-manager"
              }
            },
            "spec": {
              "nodeSelector": {
                "role": "controller"
              },
              "hostNetwork": true,
              "containers": [
                {
                  "name": "kube-controller-manager",
                  "image": "${hyperkube}:${kube_version}",
                  "command": [
                    "/hyperkube", "controller-manager",
                    "--master=https://${kube_fqdn}",
                    "--kubeconfig=/etc/kubernetes/controller/kubeconfig.yaml",
                    "--leader-elect=true",
                    "--root-ca-file=/etc/ssl/kube/ca.pem",
                    "--service-account-private-key-file=/etc/kubernetes/service-account/privkey.pem",
                    "--cloud-provider=aws"
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "host":"127.0.0.1",
                      "path": "/healthz",
                      "port": 10252
                    },
                    "initialDelaySeconds": 15,
                    "timeoutSeconds": 1
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/etc/kubernetes/controller/kubeconfig.yaml",
                      "name": "kubeconfig",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/controller",
                      "name": "controller-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/kube/ca.pem",
                      "name": "kube-ca",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/certs",
                      "name": "ssl-certs-host",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/kubernetes/service-account/privkey.pem",
                      "name": "service-account",
                      "readOnly": true
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name":"ssl-certs-host",
                  "hostPath": {
                    "path": "/usr/share/ca-certificates"
                  }
                },
                {
                  "name":"kube-ca",
                  "hostPath": {
                    "path": "/etc/ssl/kube/ca.pem"
                  }
                },
                {
                  "name":"controller-certs",
                  "hostPath": {
                    "path": "/etc/ssl/controller"
                  }
                },
                {
                  "name":"kubeconfig",
                  "hostPath": {
                    "path": "/etc/kubernetes/controller/kubeconfig.yaml"
                  }
                },
                {
                  "name":"service-account",
                  "hostPath": {
                    "path": "/etc/kubernetes/service-account/privkey.pem"
                  }
                }
              ]
            }
          }
        }
      }

  - path: /etc/kubernetes/system/kube-flannel-server.json
    content: |
      {
        "kind": "DaemonSet",
        "apiVersion": "extensions/v1beta1",
        "metadata": {
          "name": "kube-flannel-server",
          "namespace": "kube-system",
          "labels": {
            "app": "kubernetes",
            "component": "flannel-server"
          }
        },
        "spec": {
          "template": {
            "metadata": {
              "labels": {
                "app": "kubernetes",
                "component": "flannel-server"
              }
            },
            "spec": {
              "nodeSelector": {
                "role": "controller"
              },
              "hostNetwork": true,
              "containers": [
                {
                  "name": "flannel-server",
                  "image": "quay.io/coreos/flannel:0.5.5",
                  "command": [
                    "/opt/bin/flanneld",
                    "--listen=0.0.0.0:8888",
                    "--etcd-endpoints=https://localhost:2379",
                    "--etcd-cafile=/etc/ssl/etcd/ca.pem",
                    "--etcd-certfile=/etc/ssl/etcd/cert.pem",
                    "--etcd-keyfile=/etc/ssl/etcd/privkey.pem",
                    "--remote-cafile=/etc/ssl/kube/ca.pem",
                    "--remote-certfile=/etc/ssl/kube/cert.pem",
                    "--remote-keyfile=/etc/ssl/kube/privkey.pem"
                  ],
                  "securityContext": {
                    "privileged": true
                  },
                  "livenessProbe": {
                    "tcpSocket": {
                      "port": 8888
                    }
                  },
                  "volumeMounts": [
                    {
                      "mountPath": "/etc/ssl/kube",
                      "name": "kube-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/etcd",
                      "name": "etcd-certs",
                      "readOnly": true
                    },
                    {
                      "mountPath": "/etc/ssl/certs",
                      "name": "ssl-certs-host",
                      "readOnly": true
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name":"ssl-certs-host",
                  "hostPath": {
                    "path": "/usr/share/ca-certificates"
                  }
                },
                {
                  "name":"kube-certs",
                  "hostPath": {
                    "path": "/etc/ssl/kube"
                  }
                },
                {
                  "name":"etcd-certs",
                  "hostPath": {
                    "path": "/etc/ssl/etcd"
                  }
                }
              ]
            }
          }
        }
      }
