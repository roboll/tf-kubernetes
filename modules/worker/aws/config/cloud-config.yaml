#cloud-config
coreos:
  update:
    reboot-strategy: off

  units:
    - name: vault-ssh.service
      command: start
      content: |
        [Service]
        Type=oneshot

        ExecStartPre=/usr/bin/rkt fetch --trust-keys-from-https ${vault_ssh_image}
        ExecStart=/usr/bin/rkt image extract --rootfs-only --overwrite ${vault_ssh_image} /tmp/vault-ssh
        ExecStartPost=/tmp/vault-ssh/link.sh

    - name: vault-login.service
      command: start
      content: |
        [Service]
        Type=oneshot
        FailureAction=reboot
        ExecStart=/opt/bin/vault-login.sh

    - name: vault-renew-token.service
      content: |
        [Service]
        Type=simple
        FailureAction=reboot
        ExecStart=/opt/bin/vault-renew-token.sh

    - name: vault-renew-token.timer
      command: start
      content: |
        [Timer]
        OnActiveSec=12h
        OnUnitActiveSec=12h

    - name: docker.service
      command: start
      drop-ins:
        - name: 99-mount-flags.conf
          content: |
            [Service]
            MountFlags=shared

    - name: kubelet-certs.service
      command: start
      content: |
        [Unit]
        Before=kubelet.service
        After=vault-login.service

        [Service]
        Type=simple
        ExecStart=/opt/bin/kubelet-certs.sh

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service kubelet-certs.service
        After=docker.service kubelet-certs.service

        [Service]
        Restart=always
        RestartSec=10

        ExecStarPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStart=/usr/bin/docker run \
          --volume=/:/rootfs:ro \
          --volume=/sys:/sys:ro \
          --volume=/dev:/dev \
          --volume=/var/run:/var/run:rw \
          --volume=/etc/kubernetes/:/etc/kubernetes/ \
          --volume=/var/lib/docker/:/var/lib/docker:rw \
          --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \
          --net=host \
          --pid=host \
          --privileged=true \
          ${hyperkube}:${kube_version} \
            /hyperkube kubelet \
              --pod-manifest-path=/etc/kubernetes/manifests \
              --kubeconfig=/etc/kubernetes/kubeconfig.yaml \
              --require-kubeconfig \
              --lock-file=/var/run/kubelet/lock \
              --exit-on-lock-contention=true \
              --node-labels=role=worker,class=${worker_class} \
              --allow-privileged=true

write_files:
  - path: /etc/ssl/vault/ca.pem
    permissions: 0600
    encoding: base64
    content: |
      ${vault_ca_cert_pem}

  - path: /etc/vault/ssh.hcl
    permissions: 0600
    content: |
      allowed_roles = "*"
      vault_addr = "${vault_address}"
      ca_cert = "/etc/ssl/vault/ca.pem"

  - path: /opt/bin/vault-login.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      nonce="$(cat /etc/machine-id | base64)"
      pkcs="$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')"

      mkdir -p /var/lib/vault
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "Content-Type: application/json" \
        -d "{\"pkcs7\":\"$pkcs\",\"role\":\"${vault_instance_role}\",\"nonce\":\"$nonce\"}" \
        ${vault_address}/v1/auth/aws-ec2/login | \
        sed -re 's/.*"client_token":"([^"]*)".*/\1/g' > /var/lib/vault/token

  - path: /opt/bin/vault-renew-token.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      token="$(cat /var/lib/vault/token)"
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d '{"increment": "24h"}' \
        ${vault_address}/v1/auth/token/renew-self > /dev/null

  - path: /opt/bin/kubelet-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      mkdir -p /var/lib/secrets
      token="$(cat /var/lib/vault/token)"

      curl ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -o /var/lib/secrets/kubelet.ca -z /var/lib/secrets/kubelet.ca \
        ${vault_address}/v1/${kube_pki_mount}/ca/pem

      json=$(curl ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem \
        -X POST -H "X-Vault-Token: $token" \
        -d "{\"common_name\":\"kubelet\",\"alt_names\":\"$(hostname)\",\"ip_sans\":\"$private_ipv4\"}" \
        ${vault_address}/v1/${kube_pki_mount}/issue/kubelet)

      sed -re 's/.*"certificate":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /var/lib/secrets/kubelet.crt <<< $json
      sed -re 's/.*"private_key":"([^"]*)".*/\1/g' \
        -e 's/\\n/\n/g' > /var/lib/secrets/kubelet.key <<< $json

  - path: /etc/kubernetes/kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      current-context: kubelet
      clusters:
        - name: kubernetes
          cluster:
            server: https://${kube_fqdn}
            certificate-authority: /var/lib/secrets/kubelet.ca
      contexts:
        - name: kubelet
          context:
            cluster: kubernetes
            user: kubelet
      users:
        - name: kubelet
          user:
            client-certificate: /var/lib/secrets/kubelet.crt
            client-key: /var/lib/secrets/kubelet.key
