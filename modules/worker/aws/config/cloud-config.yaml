#cloud-config
coreos:
  update:
    reboot-strategy: off

  units:
    - name: vault-ssh.service
      command: start
      content: |
        [Service]
        Type=oneshot

        ExecStart=/usr/bin/docker pull ${vault_ssh_image}

    - name: docker.service
      command: start
      drop-ins:
        - name: 99-mount-flags.conf
          content: |
            [Service]
            MountFlags=shared

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=always
        RestartSec=10

        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/opt/bin/kubelet-certs-manifest
        ExecStartPre=/opt/bin/bootstrap-kubelet-certs
        ExecStart=/opt/bin/host-kubelet

write_files:
  - path: /etc/ssl/vault/ca.pem
    permissions: 0600
    encoding: base64
    content: |
      ${vault_ca_cert_pem}

  - path: /etc/vault/ssh.hcl
    permissions: 0600
    content: |
      allowed_roles = "*"
      vault_addr = "${vault_address}"
      ca_cert = "/etc/ssl/vault/ca.pem"

  - path: /etc/kube-bootstrap/env
    permissions: 0600
    content: |
      VAULT_ADDR=${vault_address}
      VAULT_AUTH_ROLE=${vault_instance_role}
      KUBE_PKI_MOUNT=${kube_pki_mount}

  - path: /var/lib/kubelet/kubeconfig
    content: |
      apiVersion: v1
      kind: Config
      current-context: kubelet
      clusters:
        - name: kubernetes
          cluster:
            server: https://${kube_fqdn}
            certificate-authority: /var/lib/kubelet/secrets/ca.pem
      contexts:
        - name: kubelet
          context:
            cluster: kubernetes
            user: kubelet
      users:
        - name: kubelet
          user:
            client-certificate: /var/lib/kubelet/secrets/cert.pem
            client-key: /var/lib/kubelet/secrets/key.pem

  - path: /opt/bin/kubelet-certs-manifest
    permissions: 0700
    content: |
      #! /bin/bash
      /usr/bin/docker run --rm --name=kube-bootstrap-sidecar \
        --volume /etc/kubernetes/manifests/:/etc/kubernetes/manifests/ \
        --volume /etc/kube-bootstrap/env:/etc/kube-bootstrap/env \
        quay.io/roboll/kube-bootstrap:alpha /opt/bin/copy-cert-sidecar.sh

  - path: /opt/bin/bootstrap-kubelet-certs
    permissions: 0700
    content: |
      #! /bin/bash
      /usr/bin/docker run --rm --name=kubelet-cert-bootstrap \
        --volume /var/lib/vault/:/var/lib/vault/ \
        --volume /var/lib/kubelet/secrets/:/var/lib/kubelet/secrets/ \
        --env-file=/etc/kube-bootstrap/env \
        quay.io/roboll/vault-cert-sidecar:v0.0.1-6-g0c646b8 \
          -auth-strategy=aws-ec2 \
          -auth-dir=/var/lib/vault/ \
          -write-auth-info=true \
          -pki-backend=${kube_pki_mount} \
          -cert-dir=/var/lib/kubelet/secrets/ \
          -runonce=true

  - path: /opt/bin/host-kubelet
    permissions: 0700
    content: |
      #! /bin/bash
      /usr/bin/docker run --rm --name=host-kubelet \
        --net=host --pid=host --privileged=true \
        --volume=/:/rootfs/:ro \
        --volume=/sys/:/sys/:ro \
        --volume=/dev/:/dev/ \
        --volume=/var/run/:/var/run/:rw \
        --volume /etc/kubernetes/:/etc/kubernetes/ \
        --volume=/var/lib/docker/:/var/lib/docker/:rw \
        --volume=/var/lib/kubelet/:/var/lib/kubelet/:shared \
        ${hyperkube}:${kube_version} \
          /kubelet \
            --require-kubeconfig=true --kubeconfig=/var/lib/kubelet/kubeconfig \
            --lock-file=/var/run/kubelet/lock --exit-on-lock-contention=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --node-labels=role=worker,class=${worker_class} \
            --allow-privileged=true --containerized=true
