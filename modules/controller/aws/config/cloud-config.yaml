#cloud-config
coreos:
  update:
    reboot-strategy: off

  etcd2:
    name: ${instance_name}
    data_dir: /var/lib/etcd/data

    initial_cluster: ${etcd_peers}
    initial_cluster_state: new

    initial_advertise_peer_urls: https://$private_ipv4:2380
    listen_peer_urls: https://0.0.0.0:2380
    advertise_client_urls: https://$private_ipv4:2379
    listen_client_urls: https://0.0.0.0:2379

    peer_cert_file: /etc/ssl/etcd/cert.pem
    peer_key_file: /etc/ssl/etcd/privkey.pem
    peer_trusted_ca_file: /etc/ssl/etcd/ca.pem
    peer_client_cert_auth: true

    cert_file: /etc/ssl/etcd/cert.pem
    key_file: /etc/ssl/etcd/privkey.pem
    trusted_ca_file: /etc/ssl/etcd/ca.pem
    client_cert_auth: true

  flannel:
    etcd_cafile: /etc/ssl/etcd/ca.pem
    etcd_keyfile: /etc/ssl/etcd/privkey.pem
    etcd_certfile: /etc/ssl/etcd/cert.pem
    etcd_endpoints: https://$private_ipv4:2379

  units:
    - name: install-ssh-helper.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/install-ssh-helper.sh

    - name: install-ca-certs.service
      command: start
      content: |
        [Service]
        Type=oneshot
        ExecStart=/opt/bin/install-ca-certs.sh

    - name: vault-login.service
      command: start
      content: |
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/opt/bin/vault-login.sh

    - name: vault-renew-token.service
      content: |
        [Service]
        Type=simple
        ExecStart=/opt/bin/vault-renew-token.sh

    - name: vault-renew-token.timer
      command: start
      content: |
        [Timer]
        OnActiveSec=12h
        OnUnitActiveSec=12h

    - name: kube-service-account.service
      command: start
      content: |
        [Unit]
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=oneshot
        ExecStart=/opt/bin/kube-service-account.sh
        ExecStartPost=/bin/bash -c "docker restart $(docker ps --format {{.Names}} | grep kube-apiserver) || true"
        ExecStartPost=/bin/bash -c "docker restart $(docker ps --format {{.Names}} | grep kube-controller-manager) || true"

    - name: kube-certs.service
      command: start
      content: |
        [Unit]
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/kube-certs.sh
        ExecStartPost=/bin/bash -c "docker restart $(docker ps --format {{.Names}} | grep kube-apiserver) || true"
        ExecStartPost=/bin/bash -c "docker restart $(docker ps --format {{.Names}} | grep kube-flannel-server) || true"

    - name: kube-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: kubelet-certs.service
      command: start
      content: |
        [Unit]
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/kubelet-certs.sh
        ExecStartPost=/bin/bash -c "systemctl kill -s HUP kubelet.service || true"

    - name: kubelet-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: etcd-certs.service
      command: start
      content: |
        [Unit]
        Before=etcd2.service
        Before=flanneld.service
        Before=kubelet.service

        Requires=vault-login.service
        After=vault-login.service

        [Service]
        Type=simple

        ExecStart=/opt/bin/etcd-certs.sh
        ExecStartPost=/bin/bash -c "systemctl kill -s HUP etcd2.service flanneld.service || true"

    - name: etcd-certs.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: docker.service
      command: start
      drop-ins:
        - name: 99-mount-flags.conf
          content: |
            [Unit]
            After=flanneld.service

            [Service]
            MountFlags=shared

    - name: awscli.service
      command: start
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        Environment=DOCKER_CONTENT_TRUST=1
        ExecStart=/usr/bin/docker build -t localhost/awscli /opt/awscli/

    - name: ecr-login.service
      command: start
      content: |
        [Unit]
        Requires=awscli.service
        After=awscli.service

        [Service]
        Type=simple
        ExecStart=/opt/bin/ecr-login.sh

    - name: ecr-login.timer
      command: start
      content: |
        [Timer]
        OnUnitActiveSec=12h

    - name: dev-xvdb-format.service
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb.device
        After=dev-xvdb.device

        Before=var-lib-etcd.mount
        ConditionPathExists=!/var/lib/etcd.formatted

        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/bin/bash -c "mkfs.ext4 -E root_owner=$(id -u etcd):$(id -u etcd) /dev/xvdb"
        ExecStartPost=/bin/touch /var/lib/etcd.formatted

    - name: var-lib-etcd.mount
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb-format.service
        After=dev-xvbd-format.service

        Before=etcd2.service

        [Mount]
        What=/dev/xvdb
        Where=/var/lib/etcd
        Type=ext4

    - name: etcd2.service
      command: start
      drop-ins:
        - name: 99-options.conf
          content: |
            [Unit]
            Before=flanneld.service
            Requires=var-lib-etcd.mount
            After=var-lib-etcd.mount

            [Service]
            Restart=always
            RestartSec=10

            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/ca.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/cert.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/privkey.pem

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 40-ssl-config.conf
          content: |
            [Service]
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/ca.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/cert.pem
            ExecStartPre=/usr/bin/test -s /etc/ssl/etcd/privkey.pem

        - name: 50-network-config.conf
          content: |
            [Unit]
            Before=docker.service
            Requires=etcd2.service
            After=etcd2.service

            [Service]
            ExecStartPre=/usr/bin/etcdctl \
              --endpoints https://$private_ipv4:2379 \
              --ca-file /etc/ssl/etcd/ca.pem \
              --cert-file /etc/ssl/etcd/cert.pem \
              --key-file /etc/ssl/etcd/privkey.pem \
              set /coreos.com/network/config \
                '{ "Network": "10.10.0.0/16", "Backend": { "Type": "vxlan" } }'

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service etcd2.service flanneld.service
        After=docker.service etcd2.service flanneld.service

        [Service]
        Restart=always
        RestartSec=10
        TimeoutStartSec=300

        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/docker pull ${hyperkube}
        ExecStartPre=/usr/bin/test -s /etc/ssl/kube/ca.pem
        ExecStartPre=/usr/bin/test -s /etc/ssl/kube/cert.pem
        ExecStartPre=/usr/bin/test -s /etc/ssl/kube/privkey.pem
        ExecStartPre=/usr/bin/test -s /etc/ssl/kubelet/ca.pem
        ExecStartPre=/usr/bin/test -s /etc/ssl/kubelet/cert.pem
        ExecStartPre=/usr/bin/test -s /etc/ssl/kubelet/privkey.pem
        ExecStartPre=/usr/bin/test -s /etc/kubernetes/service-account/pubkey.pem
        ExecStartPre=/usr/bin/test -s /etc/kubernetes/service-account/privkey.pem

        ExecStart=/usr/bin/docker run --net=host --pid=host --privileged \
          -v /:/rootfs:ro \
          -v /sys/:/sys/ \
          -v /dev/:/dev/ \
          -v /var/run/:/var/run/ \
          -v /var/log/:/var/log/ \
          -v /var/lib/docker/:/var/lib/docker/ \
          -v /var/lib/kubelet/:/var/lib/kubelet/:shared \
          -v /etc/ssl/kubelet/:/etc/ssl/kubelet/ \
          -v /etc/kubernetes/:/etc/kubernetes/ \
          -v /root/.docker/:/root/.docker/ \
          ${hyperkube} \
            /hyperkube kubelet \
              --containerized \
              --api-servers=https://${kube_fqdn} \
              --node-labels=role=controller \
              --tls-cert-file=/etc/ssl/kubelet/cert.pem \
              --tls-private-key-file=/etc/ssl/kubelet/privkey.pem \
              --register-schedulable=false \
              --config=/etc/kubernetes/manifests \
              --kubeconfig=/etc/kubernetes/kubeconfig.yaml \
              --cluster-dns=10.0.0.10 \
              --cluster-domain=cluster.local \
              --allow-privileged --v=2 --logtostderr=true

write_files:
  - path: /etc/ssl/vault/ca.pem
    permissions: 0600
    encoding: base64
    content: |
      ${vault_ca_cert_pem}

  - path: /opt/bin/install-ssh-helper.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      log="/var/log/vault-ssh.log"
      replace="auth\t\tsufficient\tpam_exec.so quiet expose_authtok log=$log /opt/bin/ssh-helper"
      cp /usr/lib64/pam.d/{sshd,system-remote-login,system-login,system-auth} /etc/pam.d/
      sed -r -i /etc/pam.d/system-auth -e "s,^(auth.*required.*pam_deny.so)$,$replace\\n\1,g"

  - path: /opt/bin/ssh-helper
    permissions: 0700
    content: |
      #! /bin/bash
      CMD="docker run -i --rm --net=host -e PAM_USER=$PAM_USER ${ssh_helper}"
      eval $CMD $*

  - path: /opt/bin/install-ca-certs.sh
    permissions: 0700
    content: |
      #! /bin/bash
      set -eo pipefail

      mkdir -p /etc/ssl/kube /etc/ssl/kubelet /etc/ssl/etcd
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -o /etc/ssl/kubelet/ca.pem ${vault_address}/v1/${kube_pki_mount}/ca/pem
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -o /etc/ssl/kube/ca.pem ${vault_address}/v1/${kube_pki_mount}/ca/pem
      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -o /etc/ssl/etcd/ca.pem ${vault_address}/v1/${etcd_pki_mount}/ca/pem

  - path: /opt/bin/vault-login.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      role="${vault_instance_role}"
      pkcs="$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem http://169.254.169.254/latest/dynamic/instance-identity/pkcs7 | tr -d '\n')"
      nonce="$(cat /etc/machine-id | base64)"

      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X POST \
        -H "Content-Type: application/json" \
        -d "{\"pkcs7\": \"$pkcs\", \"role\": \"$role\", \"nonce\":\"$nonce\"}" \
        ${vault_address}/v1/auth/aws-ec2/login | \
        sed -re 's/.*"client_token":"([^"]*)".*/\1/g' > /root/.vault-token

  - path: /opt/bin/vault-renew-token.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X POST -H "X-Vault-Token: $(cat /root/.vault-token)" \
        ${vault_address}/v1/auth/token/renew-self > /dev/null

  - path: /opt/bin/kube-service-account.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X GET -H "X-Vault-Token: $(cat /root/.vault-token)" \
        ${vault_address}/v1/${service_account_path})

      mkdir -p /etc/kubernetes/service-account
      echo "$json" | \
        sed -re 's/.*"public_key":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' \
        > /etc/kubernetes/service-account/pubkey.pem
      echo "$json" | \
        sed -re 's/.*"private_key":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' \
        > /etc/kubernetes/service-account/privkey.pem

  - path: /opt/bin/kube-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      cn="${kube_fqdn}"
      san="kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster.local"
      ipsan="10.0.0.1,$private_ipv4"

      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X POST -H "X-Vault-Token: $(cat /root/.vault-token)" \
        -d "{\"common_name\":\"$cn\", \"alt_names\":\"$san\", \"ip_sans\": \"$ipsan\"}" \
        ${vault_address}/v1/${kube_pki_mount}/issue/${kube_pki_role})

      mkdir -p /etc/ssl/kube/
      echo "$json" | \
        sed -re 's/.*"certificate":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/kube/cert.pem
      echo "$json" | \
        sed -re 's/.*"private_key":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/kube/privkey.pem

  - path: /opt/bin/kubelet-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      cn="kubelet"

      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X POST -H "X-Vault-Token: $(cat /root/.vault-token)" \
        -d "{\"common_name\":\"$cn\"}" \
        ${vault_address}/v1/${kube_pki_mount}/issue/${kubelet_pki_role})

      mkdir -p /etc/ssl/kube/
      echo "$json" | \
        sed -re 's/.*"certificate":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/kubelet/cert.pem
      echo "$json" | \
        sed -re 's/.*"private_key":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/kubelet/privkey.pem

  - path: /opt/bin/etcd-certs.sh
    permissions: 0700
    content: |
      #!/bin/bash
      set -eo pipefail

      cn="controller"
      ipsan="10.0.0.1,$private_ipv4"

      json=$(curl -sSf ${vault_curl_opts} --cacert /etc/ssl/vault/ca.pem -X POST -H "X-Vault-Token: $(cat /root/.vault-token)" \
        -d "{\"common_name\":\"$cn\", \"ip_sans\": \"$ipsan\"}" \
        ${vault_address}/v1/${etcd_pki_mount}/issue/${etcd_pki_role})

      mkdir -p /etc/ssl/etcd/
      echo "$json" | \
        sed -re 's/.*"certificate":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/etcd/cert.pem
      echo "$json" | \
        sed -re 's/.*"private_key":"([^"]*)".*/\1/g' -e 's/\\n/\n/g' > /etc/ssl/etcd/privkey.pem

  - path: /opt/awscli/Dockerfile
    content: |
      FROM alpine:3.4

      RUN mkdir -p /aws && \
        apk -Uuv add groff less python py-pip jq && \
        pip install awscli && \
        apk --purge -v del py-pip && \
        rm /var/cache/apk/*

      WORKDIR /aws
      ENTRYPOINT ["aws"]

  - path: /opt/bin/ecr-login.sh
    permissions: 0700
    content: |
      #! /bin/bash
      set -eo pipefail

      eval $(docker run --rm -e AWS_DEFAULT_REGION=${region} localhost/awscli ecr get-login)

  - path: /etc/kubernetes/kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      current-context: kubelet
      clusters:
        - name: kubernetes
          cluster:
            certificate-authority: /etc/ssl/kube/ca.pem
            server: https://${kube_fqdn}
      contexts:
        - name: kubelet
          context:
            cluster: kubernetes
            user: kubelet
      users:
        - name: kubelet
          user:
            client-certificate: /etc/ssl/kube/cert.pem
            client-key: /etc/ssl/kube/privkey.pem

  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
        labels:
          app: kubernetes
          component: apiserver
      spec:
        hostNetwork: true
        imagePullPolicy: Always
        containers:
          - name: kube-apiserver
            image: ${hyperkube}
            command:
              - /hyperkube
              - apiserver
              - --secure-port=443
              - --etcd-servers=https://$private_ipv4:2379
              - --etcd-cafile=/etc/ssl/etcd/ca.pem
              - --etcd-certfile=/etc/ssl/etcd/cert.pem
              - --etcd-keyfile=/etc/ssl/etcd/privkey.pem
              - --tls-cert-file=/etc/ssl/kube/cert.pem
              - --tls-private-key-file=/etc/ssl/kube/privkey.pem
              - --service-account-key-file=/etc/kubernetes/service-account/pubkey.pem
              - --kubelet-certificate-authority=/etc/ssl/kubelet/ca.pem
              - --kubelet-client-certificate=/etc/ssl/kubelet/cert.pem
              - --kubelet-client-key=/etc/ssl/kubelet/privkey.pem
              - --client-ca-file=/etc/ssl/kube/ca.pem
              - --allow-privileged=true
              - --service-cluster-ip-range=10.0.0.0/16
              - --advertise-address=$private_ipv4
              - --external-hostname=${kube_fqdn}
              - --oidc-issuer-url=${oidc_issuer_url}
              - --oidc-client-id=${oidc_client_id}
              - --oidc-username-claim=${oidc_username_claim}
              - --oidc-groups-claim=${oidc_groups_claim}
              - --authorization-mode=RBAC
              - --authorization-rbac-super-user=admin
              - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,DenyEscalatingExec,ServiceAccount
              - --runtime-config=extensions/v1beta1/deployments=true,extensions/v1beta1/daemonsets=true,extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,rbac.authorization.k8s.io/v1alpha1
              - --cloud-provider=aws
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 8080
              initialDelaySeconds: 30
              timeoutSeconds: 1
            volumeMounts:
              - mountPath: /etc/kubernetes/service-account/pubkey.pem
                name: service-account
                readOnly: true
              - mountPath: /etc/ssl/kube/
                name: kube-certs
                readOnly: true
              - mountPath: /etc/ssl/kubelet/
                name: kubelet-certs
                readOnly: true
              - mountPath: /etc/ssl/etcd/
                name: etcd-certs
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
        volumes:
          - hostPath:
              path: /etc/kubernetes/controller
            name: ssl-certs-kubernetes
          - hostPath:
              path: /etc/kubernetes/service-account/pubkey.pem
            name: service-account
          - hostPath:
              path: /etc/ssl/kube/
            name: kube-certs
          - hostPath:
              path: /etc/ssl/kubelet/
            name: kubelet-certs
          - hostPath:
              path: /etc/ssl/etcd/
            name: etcd-certs
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
        labels:
          app: kubernetes
          component: controller-manager
      spec:
        hostNetwork: true
        imagePullPolicy: Always
        containers:
          - name: kube-controller-manager
            image: ${hyperkube}
            command:
              - /hyperkube
              - controller-manager
              - --master=https://${kube_fqdn}
              - --kubeconfig=/etc/kubernetes/kubeconfig.yaml
              - --leader-elect=true
              - --root-ca-file=/etc/ssl/kube/ca.pem
              - --service-account-private-key-file=/etc/kubernetes/service-account/privkey.pem
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10252
              initialDelaySeconds: 15
              timeoutSeconds: 1
            volumeMounts:
              - mountPath: /etc/kubernetes/kubeconfig.yaml
                name: kubeconfig
                readOnly: true
              - mountPath: /etc/ssl/kube
                name: kube-certs
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
              - mountPath: /etc/kubernetes/service-account/privkey.pem
                name: service-account
                readOnly: true
        volumes:
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host
          - hostPath:
              path: /etc/ssl/kube/
            name: kube-certs
          - hostPath:
              path: /etc/kubernetes/kubeconfig.yaml
            name: kubeconfig
          - hostPath:
              path: /etc/kubernetes/service-account/privkey.pem
            name: service-account

  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
        labels:
          app: kubernetes
          component: scheduler
      spec:
        hostNetwork: true
        imagePullPolicy: Always
        containers:
          - name: kube-scheduler
            image: ${hyperkube}
            command:
              - /hyperkube
              - scheduler
              - --master=https://${kube_fqdn}
              - --kubeconfig=/etc/kubernetes/kubeconfig.yaml
              - --leader-elect=true
            livenessProbe:
              httpGet:
                host: 127.0.0.1
                path: /healthz
                port: 10251
              initialDelaySeconds: 15
              timeoutSeconds: 1
            volumeMounts:
              - mountPath: /etc/ssl/kube
                name: kube-certs
                readOnly: true
              - mountPath: /etc/kubernetes/kubeconfig.yaml
                name: kubeconfig
                readOnly: true
        volumes:
          - hostPath:
              path: /etc/ssl/kube
            name: kube-certs
          - hostPath:
              path: /etc/kubernetes/kubeconfig.yaml
            name: kubeconfig

  - path: /etc/kubernetes/manifests/kube-flannel-server.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-flannel-server
        namespace: kube-system
        labels:
          k8s-app: flannel-server
          version: v1
      spec:
        hostNetwork: true
        imagePullPolicy: Always
        containers:
          - name: flannel-server
            image: quay.io/coreos/flannel:0.5.5
            command:
              - /opt/bin/flanneld
              - --listen=0.0.0.0:8888
              - --etcd-endpoints=https://$private_ipv4:2379
              - --etcd-cafile=/etc/ssl/etcd/ca.pem
              - --etcd-certfile=/etc/ssl/etcd/cert.pem
              - --etcd-keyfile=/etc/ssl/etcd/privkey.pem
              - --remote-cafile=/etc/ssl/kube/ca.pem
              - --remote-certfile=/etc/ssl/kube/cert.pem
              - --remote-keyfile=/etc/ssl/kube/privkey.pem
            securityContext:
              privileged: true
            livenessProbe:
              tcpSocket:
                port: 8888
            volumeMounts:
              - mountPath: /etc/ssl/kube
                name: cluster-certs
                readOnly: true
              - mountPath: /etc/ssl/etcd
                name: etcd-certs
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
        volumes:
          - hostPath:
              path: /etc/kubernetes/service-account/pubkey.pem
            name: service-account
          - hostPath:
              path: /etc/ssl/kube
            name: cluster-certs
          - hostPath:
              path: /etc/ssl/etcd
            name: etcd-certs
          - hostPath:
              path: /usr/share/ca-certificates
            name: ssl-certs-host
