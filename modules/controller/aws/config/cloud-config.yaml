#cloud-config
hostname: ${instance_name}.${domain}
coreos:
  update:
    reboot-strategy: reboot

  units:
    - name: dev-xvdb-format.service
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb.device
        After=dev-xvdb.device

        Before=var-lib-etcd.mount
        ConditionPathExists=!/var/lib/etcd.formatted

        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.ext4 /dev/xvdb
        ExecStartPost=/bin/touch /var/lib/etcd.formatted

    - name: var-lib-etcd.mount
      command: start
      content: |
        [Unit]
        Requires=dev-xvdb-format.service
        After=dev-xvbd-format.service

        [Mount]
        What=/dev/xvdb
        Where=/var/lib/etcd
        Type=ext4

    - name: docker.service
      command: start
      drop-ins:
        - name: 99-mount-flags.conf
          content: |
            [Service]
            MountFlags=shared

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Requires=docker.service
        After=docker.service

        [Service]
        Restart=always
        RestartSec=10

        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/opt/bin/install-kube-bootstrap-manifest
        ExecStartPre=/opt/bin/bootstrap-kubelet-certs
        ExecStart=/opt/bin/host-kubelet

    - name: kube-cordon.service
      content: |
        [Unit]
        DefaultDependencies=no
        Before=shutdown.target reboot.target halt.target

        [Service]
        Type=oneshot

        ExecStart=/usr/bin/docker run --rm --net=host --name=kubectl-cordon \
          -v /var/lib/kubelet/:/var/lib/kubelet/ \
          -v /etc/kubelet/:/etc/kubelet/ \
          ${hyperkube_image} /kubectl cordon %H

    - name: vault-ssh.service
      command: start
      content: |
        [Service]
        Type=oneshot

        ExecStartPre=/usr/bin/docker pull ${vault_ssh_image}
        ExecStartPre=/usr/bin/mkdir -p /etc/pam.d
        ExecStartPre=/usrbin/mkdir -p /opt/bin
        ExecStart=/usr/bin/docker run -it --rm \
          -v /etc/pam.d/:/rootfs/etc/pam.d/ \
          -v /opt/bin/:/rootfs/opt/bin/ \
          ${vault_ssh_image} /install.sh

write_files:
  - path: /var/lib/vault/ca.pem
    permissions: 0600
    encoding: base64
    content: |
      ${vault_ca_cert_pem_b64}

  - path: /etc/vault/ssh.hcl
    permissions: 0600
    content: |
      allowed_roles = "*"
      vault_addr = "${vault_address}"
      ca_cert = "/var/lib/vault/ca.pem"

  - path: /etc/kube-bootstrap/env
    permissions: 0600
    content: |
      REGION=${region}
      CLUSTER_NAME=${env}

      HYPERKUBE=${hyperkube_image}
      KUBE_FQDN=${kube_fqdn}

      ETCD_PEERS=${etcd_peers}
      ETCD_NODES=${etcd_nodes}

      VAULT_ADDR=${vault_address}
      VAULT_CA_CERT=/var/lib/vault/ca.pem
      VAULT_AUTH_ROLE=${vault_instance_role}

      ETCD_PKI_MOUNT=${etcd_pki_mount}
      KUBE_PKI_MOUNT=${kube_pki_mount}

      SVC_ACCT_PUBKEY_PATH=${service_account_pubkey}
      SVC_ACCT_PRIVKEY_PATH=${service_account_privkey}

  - path: /var/lib/kubelet/kubeconfig
    permissions: 0700
    content: |
      kind: Config
      apiVersion: v1
      current-context: kube
      clusters:
        - name: kubernetes
          cluster:
            server: http://localhost:8080
      users:
        - name: user
      contexts:
        - name: kube
          context:
            cluster: kubernetes
            user: user

  - path: /opt/bin/install-kube-bootstrap-manifest
    permissions: 0700
    content: |
      #! /bin/bash
      docker rm kube-bootstrap || true
      docker run --rm --name=kube-bootstrap \
        --volume /etc/kubernetes/manifests/:/etc/kubernetes/manifests/ \
        --volume /etc/kube-bootstrap/env:/etc/kube-bootstrap/env \
        ${bootstrap_image} /opt/bin/copy-manifest.sh

  - path: /opt/bin/bootstrap-kubelet-certs
    permissions: 0700
    content: |
      #! /bin/bash
      mkdir -p /etc/kubelet/
      docker rm kubelet-cert-bootstrap || true
      docker run --rm --name=kubelet-cert-bootstrap \
        --net=host --privileged=true \
        --volume /etc/kubelet/:/etc/kubelet/ \
        --volume /var/lib/vault/:/var/lib/vault/ \
        --env-file=/etc/kube-bootstrap/env \
        ${cert_sidecar_image} \
          -auth-strategy=aws-ec2  -auth-dir=/var/lib/vault/ -write-auth-info=true \
          -pki-backend=${kube_pki_mount} -cert-dir=/etc/kubelet/ \
          -hostname=kubelet -san=$(hostname -f) \
          -runonce=true

  - path: /opt/bin/host-kubelet
    permissions: 0700
    content: |
      #! /bin/bash
      mkdir -p /var/run/kubelet/
      docker rm host-kubelet || true
      docker run --rm --name=host-kubelet \
        --net=host --pid=host --privileged=true \
        --volume=/:/rootfs/:ro \
        --volume=/sys/:/sys/:ro \
        --volume=/dev/:/dev/ \
        --volume=/var/run/:/var/run/:rw \
        --volume /etc/kubelet/:/etc/kubelet/ \
        --volume=/etc/kubernetes/:/etc/kubernetes/ \
        --volume=/var/lib/docker/:/var/lib/docker/:rw \
        --volume=/var/lib/kubelet/:/var/lib/kubelet/:shared \
        ${hyperkube_image} \
          /kubelet \
            --require-kubeconfig=true --kubeconfig=/var/lib/kubelet/kubeconfig \
            --lock-file=/var/run/kubelet/lock --exit-on-lock-contention=true \
            --pod-manifest-path=/etc/kubernetes/manifests \
            --node-labels=role=controller --register-schedulable=false \
            --allow-privileged=true --containerized=true \
            --cloud-provider= --cluster-dns=10.0.0.10 --cluster-domain=cluster.local \
            --network-plugin=cni --network-plugin-dir=/etc/cni/net.d \
            --tls-cert-file=/etc/kubelet/cert.pem --tls-private-key-file=/etc/kubelet/key.pem
